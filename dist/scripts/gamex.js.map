{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/grafx/index.js","node_modules/lsl-animatex/index.js","node_modules/lsl-animatex/src/animation-job.js","node_modules/lsl-animatex/src/animator.js","node_modules/lsl-animatex/src/frame-latency-profiler.js","node_modules/lsl-animatex/src/persistent-animation-job.js","node_modules/lsl-animatex/src/transient-animation-job.js","node_modules/lsl-animatex/src/util.js","src/index.js","src/src/collidable-physics-model-controller.js","src/src/config-controller.js","src/src/game-controller.js","src/src/game-scene.js","src/src/input-controller.js","src/src/physics-model-controller.js","src/src/spring-follow-camera.js","src/wall/index.js","src/wall/src/wall-collidable.js","src/wall/src/wall-controller.js"],"names":[],"mappings":"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","file":"gamex.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","module.exports = {}; // FIXME: Point this to dist\n","export * from './src/animation-job';\nexport * from './src/animator';\nexport * from './src/frame-latency-profiler';\nexport * from './src/persistent-animation-job';\nexport * from './src/transient-animation-job';\n","/**\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\n *\n * @abstract\n */\nclass AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    // AnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === AnimationJob) {\n      throw new TypeError('Cannot construct AnimationJob instances directly');\n    }\n\n    this._startTime = 0;\n    this._isComplete = true;\n    this._onComplete = onComplete;\n  }\n\n  /**\n   * Indicates whether this AnimationJob is complete.\n   *\n   * @return {boolean}\n   */\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  /**\n   * Sets this AnimationJob as started.\n   *\n   * @param {DOMHighResTimeStamp} startTime\n   */\n  start(startTime) {\n    this._startTime = startTime;\n    this._isComplete = false;\n  }\n\n  /**\n   * Updates the animation progress of this AnimationJob to match the given time.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Draws the current state of this AnimationJob.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Handles any necessary state for this AnimationJob being finished.\n   *\n   * @param {boolean} isCancelled\n   */\n  finish(isCancelled) {\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\n\n    this._isComplete = true;\n\n    if (this._onComplete) {\n      this._onComplete();\n    }\n  }\n}\n\nexport {AnimationJob};\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\nimport {PersistentAnimationJob} from './persistent-animation-job';\nimport {TransientAnimationJob} from './transient-animation-job';\n\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\n\n/**\n * This class handles the animation loop.\n *\n * This class's responsibilities include:\n * - updating modules for the current frame,\n * - drawing renderables for the current frame,\n * - starting and stopping transient animation jobs,\n * - capping time step durations at a max threshold.\n */\nclass Animator {\n  constructor() {\n    this._jobs = [];\n    this._previousTime = null;\n    this._isPaused = true;\n    this._requestAnimationFrameId = null;\n    this._totalUnpausedRunTime = 0;\n    this._lastUnpauseTime = null;\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\n  }\n\n  /**\n   * Starts the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  startJob(job) {\n    // Is this a restart?\n    if (!job.isComplete) {\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\n\n      if (job instanceof PersistentAnimationJob) {\n        job.reset();\n      } else {\n        job.finish(true);\n        job.start(window.performance.now());\n      }\n    } else {\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\n\n      job.start(this._previousTime);\n      this._jobs.push(job);\n    }\n\n    this._startAnimationLoop();\n  }\n\n  /**\n   * Cancels the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  cancelJob(job) {\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\n    job.finish(true);\n  }\n\n  /**\n   * Cancels all running AnimationJobs.\n   */\n  cancelAll() {\n    while (this._jobs.length) {\n      this.cancelJob(this._jobs[0]);\n    }\n  }\n\n  /** @returns {DOMHighResTimeStamp} */\n  get currentTime() {\n    return this._previousTime;\n  }\n\n  /** @returns {boolean} */\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  pause() {\n    this._stopAnimationLoop();\n    console.debug('Animator paused');\n  }\n\n  unpause() {\n    this._startAnimationLoop();\n    console.debug('Animator unpaused');\n  }\n\n  /**\n   * This is the animation loop that drives all of the animation.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @private\n   */\n  _animationLoop(currentTime) {\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\n    // with the animationFrame time.\n    if (currentTime < this._previousTime) {\n      this._previousTime = currentTime - 1;\n    }\n\n    let deltaTime = currentTime - this._previousTime;\n    this._previousTime = currentTime;\n\n    this._latencyProfiler.recordFrameLatency(deltaTime);\n\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\n    // a max threshold.\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\n\n    if (!this._isPaused) {\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\n      this._updateJobs(currentTime, deltaTime);\n      this._drawJobs();\n    }\n  }\n\n  /**\n   * Updates all of the active AnimationJobs.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateJobs(currentTime, deltaTime) {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      let job = this._jobs[i];\n\n      // Remove jobs from the list after they are complete.\n      if (job.isComplete) {\n        this._removeJob(job, i);\n        i--;\n        count--;\n        continue;\n      }\n\n      // Check whether the job is transient and has reached its end.\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\n        job.finish(false);\n      } else {\n        job.update(currentTime, deltaTime);\n      }\n    }\n  }\n\n  /**\n   * Removes the given job from the collection of active, animating jobs.\n   *\n   * @param {AnimationJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\n\n    if (index >= 0) {\n      this._jobs.splice(index, 1);\n    } else {\n      const count = this._jobs.length;\n      for (index = 0; index < count; index++) {\n        if (this._jobs[index] === job) {\n          this._jobs.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    // Stop the animation loop when there are no more jobs to animate.\n    if (this._jobs.length === 0) {\n      this._stopAnimationLoop();\n    }\n  }\n\n  /**\n   * Draws all of the active AnimationJobs.\n   *\n   * @private\n   */\n  _drawJobs() {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      this._jobs[i].draw();\n    }\n  }\n\n  /**\n   * Starts the animation loop if it is not already running.\n   *\n   * This method is idempotent.\n   *\n   * @private\n   */\n  _startAnimationLoop() {\n    if (this._isPaused) {\n      this._lastUnpauseTime = window.performance.now();\n    }\n    this._isPaused = false;\n\n    // Only actually start the loop if it isn't already running and the page has focus.\n    if (!this._requestAnimationFrameId && !document.hidden) {\n      this._latencyProfiler.start();\n      this._previousTime = window.performance.now();\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(time => this._animationLoop(time));\n    }\n  }\n\n  /**\n   * Stops the animation loop.\n   *\n   * @private\n   */\n  _stopAnimationLoop() {\n    if (!this._isPaused) {\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\n    }\n    this._isPaused = true;\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\n    this._requestAnimationFrameId = null;\n    this._latencyProfiler.stop();\n  }\n\n  /**\n   * Creates a promise that will resolve on the next animation loop.\n   *\n   * @returns {Promise}\n   */\n  resolveOnNextFrame() {\n    return new Promise(window.requestAnimationFrame);\n  }\n\n  /**\n   * Gets the total amount of time the animator has been running while not paused.\n   *\n   * @returns {DOMHighResTimeStamp}\n   */\n  get totalRunTime() {\n    return this._isPaused\n        ? this._totalUnpausedRunTime\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\n  }\n\n  /**\n   * @returns {DOMHighResTimeStamp}\n   */\n  get _timeSinceLastPaused() {\n    return window.performance.now() - this._lastUnpauseTime;\n  }\n}\n\nconst animator = new Animator();\n\nexport {animator};\n\n/**\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\n * millisecond.\n */\n\n","/**\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\n * periodically logs these values.\n */\nclass FrameLatencyProfiler {\n  /**\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\n   * log message is shown as a warning. In milliseconds.\n   * @param {string} logLabel A label to show for each latency log message.\n   */\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\n    this._logPeriod = logPeriod;\n    this._latencyWarningThreshold = latencyWarningThreshold;\n    this._logLabel = logLabel;\n\n    this._frameCount = null;\n    this._maxFrameLatency = null;\n    this._minFrameLatency = null;\n    this._avgFrameLatency = null;\n\n    this._intervalId = null;\n  }\n\n  start() {\n    this.stop();\n    this.reset();\n\n    this._intervalId = setInterval(() => {\n      this.logFrameLatency();\n      this.reset();\n    }, this._logPeriod);\n  }\n\n  stop() {\n    clearInterval(this._intervalId);\n  }\n\n  reset() {\n    this._frameCount = 0;\n    this._maxFrameLatency = Number.MIN_VALUE;\n    this._minFrameLatency = Number.MAX_VALUE;\n    this._avgFrameLatency = 0;\n  }\n\n  /**\n   * Keeps track of a running average, min value, and max value for the frame latencies.\n   *\n   * @param {DOMHighResTimeStamp} frameLatency\n   */\n  recordFrameLatency(frameLatency) {\n    this._frameCount++;\n    this._maxFrameLatency =\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\n    this._minFrameLatency =\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\n    this._avgFrameLatency =\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\n  }\n\n  logFrameLatency() {\n    if (this._frameCount > 0) {\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\n        console.warn(message);\n      } else {\n        console.debug(message);\n      }\n    }\n  }\n}\n\nexport {FrameLatencyProfiler};\n","import {AnimationJob} from './animation-job';\n\n/**\n * A PersistentAnimationJob recurs or has an indefinite duration.\n *\n * @abstract\n */\nclass PersistentAnimationJob extends AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    super(onComplete);\n\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === PersistentAnimationJob) {\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  reset() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {PersistentAnimationJob};\n","import {_util} from './util';\n\nimport {AnimationJob} from './animation-job';\n\n/**\n * A TransientAnimationJob is temporary and has a definite beginning and end.\n *\n * @abstract\n */\nclass TransientAnimationJob extends AnimationJob {\n  /**\n   * @param {number} duration\n   * @param {number} delay\n   * @param {Function|String} easingFunction\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(duration, delay, easingFunction, onComplete) {\n    super(onComplete);\n\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === TransientAnimationJob) {\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\n    }\n\n    this._duration = duration;\n    this._delay = delay;\n    this._easingFunction = typeof easingFunction === 'function'\n        ? easingFunction\n        : _util.easingFunctions[easingFunction];\n  }\n\n  /**\n   * @returns {number}\n   */\n  get endTime() {\n    return this._startTime + this._duration + this._delay;\n  }\n}\n\nexport {TransientAnimationJob};\n","/**\n * This module defines a collection of static utility functions.\n */\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\nconst _util = {\n  easingFunctions,\n};\n\nexport {\n  _util,\n};\n","/**\n * This module re-exports all of the exports in the grafx framework. This makes the entire framework\n * conveniently accessible via this single module.\n */\n\nexport * from 'lsl-animatex';\nexport * from 'grafx';\nexport * from 'lsl-physx';\n\nexport * from './src/collidable-physics-model-controller';\nexport * from './src/config-controller';\nexport * from './src/game-controller';\nexport * from './src/game-scene';\nexport * from './src/input-controller';\nexport * from './src/physics-model-controller';\nexport * from './src/spring-follow-camera';\n\nexport * from './wall';\n","import {PhysicsModelController} from './physics-model-controller';\nimport {CollidablePhysicsJob, PhysicsJob, PhysicsState} from 'lsl-physx';\n\n/**\n * This class represents a collidable physics-based model-controller.\n *\n * @abstract\n */\nclass CollidablePhysicsModelController extends PhysicsModelController {\n  /**\n   * @param {ModelController|ModelControllerConfig} modelControllerOrParams\n   * @param {CollidablePhysicsJob|DynamicsConfig} physicsJobOrDynamicsParams\n   * @param {RenderableShapeConfig} [shapeParams]\n   * @param {Array.<ForceApplier>} forceAppliers\n   */\n  constructor(modelControllerOrParams, physicsJobOrDynamicsParams, shapeParams, forceAppliers) {\n    super(modelControllerOrParams, physicsJobOrDynamicsParams, shapeParams, forceAppliers);\n\n    if (physicsJobOrDynamicsParams instanceof CollidablePhysicsJob) {\n      this.physicsJob = physicsJobOrDynamicsParams;\n    } else {\n      const state = new PhysicsState(physicsJobOrDynamicsParams);\n      this.physicsJob = new CollidablePhysicsJob(shapeParams, state, forceAppliers, this,\n          collision => this.handleCollision(collision));\n    }\n\n    // CollidablePhysicsModelController is an abstract class. It should not be instantiated directly.\n    if (new.target === CollidablePhysicsModelController) {\n      throw new TypeError('Cannot construct CollidablePhysicsModelController instances directly');\n    }\n  }\n\n  /**\n   * This callback is triggered in response to a collision.\n   *\n   * @param {Collision} collision\n   * @returns {boolean} True if this needs the standard collision restitution to proceed.\n   * @abstract\n   */\n  handleCollision(collision) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {CollidablePhysicsModelController};\n\n/**\n * @typedef {RenderableShapeConfig&CollidableShapeConfig} RenderableAndCollidableShapeConfig\n */\n","import {\n  createHslColorString,\n  debounce,\n  find,\n  getViewportSize,\n  hslToHsv,\n  hsvToHsl,\n  hslToRgb,\n  isInt,\n} from 'grafx';\n\nconst _SMALL_SCREEN_WIDTH_THRESHOLD = 800;\n\n/**\n * This top-level ConfigController class wraps the dat.GUI library and provides higher-level\n * configuration functionality.\n *\n * ## Configuring Parameters\n *\n * Consumers of this module will need to specify configuration parameters with a certain form. For\n * each property on a config object, an item will be created in the corresponding dat.GUI folder.\n * The type and specifics of the menu item depends on the value assigned to the config property:\n *\n * - Toggle item:\n *   - Created if the config property is a boolean.\n * - Trigger item:\n *   - Created if the config property is a function.\n * - Slider item:\n *   - Created if the config property is an object with 'min', 'max', and 'start' properties.\n *   - When the config object is parsed, this initial config object will be removed and replaced\n *     with only the current actual value.\n *   - The intervals of the slider are automatically determined by the dat.GUI library and depend on\n *     the type of the 'min'/'max'/'value' properties (int vs float). See the dat.GUI documentation\n *     for more info.\n * - Color item:\n *   - Created if the config property is an object with 'h'/'s'/'l' properties.\n *   - When the config object is parsed, this initial config object will be replaced with a new\n *     object that has 'h'/'s'/'v' properties and an 'hsl' property, which is an object containing\n *     'h'/'s'/'l' properties and a 'colorString' property that contains a valid color string to\n *     assign to a CSS property.\n *   - All 'h'/'s'/'l' and 'h'/'s'/'v' values should be in the range of [0,1].\n * - Text item:\n *   - Created if the config property is a String.\n */\nclass ConfigController {\n  constructor() {\n    this._datGuiWidth = 300;\n    this._gui = null;\n  }\n\n  /**\n   * Sets up the dat.GUI controller.\n   */\n  initialize() {\n    // Create the dat.GUI menu.\n    this._createGuiIfNotCreated(true);\n    this._gui.width = this._datGuiWidth;\n\n    // Automatically close the menu on smaller screens.\n    // TODO: Check that the menu is closed initially (with no resize event) if the page loads at too small a width.\n    const debouncedResize = debounce(() => this._onResize(), 300);\n    window.addEventListener('resize', debouncedResize, false);\n  }\n\n  /**\n   * Clears the dat.GUI menu.\n   */\n  destroy() {\n    this._gui.destroy();\n  }\n\n  /**\n   * @param {boolean} isGuiVisible\n   * @private\n   */\n  _createGuiIfNotCreated(isGuiVisible) {\n    if (this._gui) {\n      if (isGuiVisible) {\n        this._gui.domElement.style.display = 'block';\n      }\n    } else {\n      this._gui = new dat.GUI();\n      if (!isGuiVisible) {\n        this._gui.domElement.style.display = 'none';\n      }\n    }\n  }\n\n  /**\n   * Creates a folder with the given configuration underneath the given parent folder.\n   *\n   * @param {MenuFolderConfig} folderConfig\n   * @param {dat.gui.GUI} [parentFolder] If not given, the folder is created at the top level.\n   * @param {Object} [onChangeListeners] A map from labels to on-change handlers.\n   */\n  createFolder(folderConfig, parentFolder, onChangeListeners) {\n    this._createGuiIfNotCreated(false);\n\n    parentFolder = parentFolder || this._gui;\n\n    // TODO: Copy the original config and store it somehow on the dat.GUI menu item? This is important for resetting configs later (from the other controller).\n    const folder = parentFolder.addFolder(folderConfig.label);\n\n    folderConfig.folder = folder;\n\n    this._createItems(folderConfig);\n\n    // Add listeners from the config file.\n    this._addOnChangeListeners(folderConfig, folderConfig.onChangeListeners, true);\n\n    // Add listeners from the caller of this method.\n    this._addOnChangeListeners(folderConfig, onChangeListeners, false);\n\n    if (folderConfig.isOpen) {\n      folder.open();\n    }\n\n    // Recursively create descendant folders.\n    if (folderConfig.childFolders) {\n      this.createFolders(folderConfig.childFolders, folder);\n    }\n  }\n\n  /**\n   * @param {Array.<MenuFolderConfig>} folderConfigs\n   * @param {dat.gui.GUI} parentFolder\n   */\n  createFolders(folderConfigs, parentFolder) {\n    folderConfigs.forEach(folderConfig => this.createFolder(folderConfig, parentFolder));\n  }\n\n  /**\n   * @param {MenuFolderConfig} folderConfig\n   * @param {string} label\n   * @param {Function} callback\n   */\n  addOnChangeListener(folderConfig, label, callback) {\n    if (folderConfig.items[label]) {\n      folderConfig.items[label].onChangeListeners.push(callback);\n    } else {\n      console.warn('Attempting to add on-change listener for a non-existent config', label,\n          folderConfig);\n    }\n  }\n\n  hideMenu() {\n    console.info('Hide Menu clicked');\n    document.querySelector('body > .dg').style.display = 'none';\n  }\n\n  /**\n   * NOTE: This is not idempotent. This modifies the original folderConfig.config object.\n   *\n   * @param {MenuFolderConfig} folderConfig\n   * @private\n   */\n  _createItems(folderConfig) {\n    folderConfig.items = {};\n\n    Object.keys(folderConfig.config).forEach((itemConfigKey) => {\n      // Do not expose internal configurations to the user.\n      if (itemConfigKey.substr(0, 1) === '_') return;\n\n      const itemConfig = folderConfig.config[itemConfigKey];\n\n      // Determine which method to use to create the menu item.\n      const pair = find([\n        [ConfigController.isToggleItem, ConfigController._createToggleItem],\n        [ConfigController.isTriggerItem, ConfigController._createTriggerItem],\n        [ConfigController.isSliderItem, ConfigController._createSliderItem],\n        [ConfigController.isNumberItem, ConfigController._createNumberItem],\n        [ConfigController.isHslColorItem, ConfigController._createHslColorItem],\n        [ConfigController.isTextItem, ConfigController._createTextItem],\n        [ConfigController.isStringSelectorItem, ConfigController._createStringSelectorItem],\n        [ConfigController.isVec3NumberItem, ConfigController._createVec3NumberItems],\n        [ConfigController.isVec3SliderItem, ConfigController._createVec3SliderItems],\n      ], (pair) => pair[0](itemConfig));\n      if (!pair) {\n        console.warn('Unrecognized config type', itemConfig);\n        return;\n      }\n      const menuItemCreator = pair[1];\n\n      // Create the actual dat.GUI menu item and save a reference to it.\n      const menuItemData = menuItemCreator.call(this, folderConfig.config,\n          itemConfigKey, itemConfig, folderConfig.folder);\n      if (menuItemData instanceof Array) {\n        const parentMenuItemData = {onChangeListeners: []};\n\n        // Record the individual sub-items.\n        menuItemData.forEach(data => {\n          folderConfig.items[data.label] = data;\n\n          // Hook up the (parent item's) onChange listeners.\n          data.menuItem.onChange(() => {\n            data.onChangeListeners.forEach(callback => callback());\n            parentMenuItemData.onChangeListeners.forEach(callback => callback());\n          });\n        });\n\n        // Record the parent item.\n        folderConfig.items[itemConfigKey] = parentMenuItemData;\n      } else {\n        folderConfig.items[itemConfigKey] = menuItemData;\n\n        // Hook up the onChange listeners.\n        menuItemData.menuItem.onChange(() =>\n            menuItemData.onChangeListeners.forEach(callback => callback()));\n      }\n    });\n  }\n\n  /**\n   * @param {MenuFolderConfig} folderConfig\n   * @param {Object} onChangeListeners A map from labels to on-change event handlers.\n   * @param {boolean} makeInitialCallToListeners\n   * @private\n   */\n  _addOnChangeListeners(folderConfig, onChangeListeners, makeInitialCallToListeners) {\n    if (onChangeListeners) {\n      Object.keys(onChangeListeners).forEach(key => {\n        const onChangeHandler = onChangeListeners[key];\n        configController.addOnChangeListener(folderConfig, key, onChangeHandler);\n        if (makeInitialCallToListeners) {\n          onChangeHandler();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the menu on smaller screens.\n   */\n  _onResize() {\n    setTimeout(() => {\n      if (getViewportSize() < _SMALL_SCREEN_WIDTH_THRESHOLD) {\n        this._gui.close();\n      }\n    }, 10);\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {ToggleMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createToggleItem(configObject, label, itemConfig, folder) {\n    return {\n      menuItem: folder.add(configObject, label),\n      onChangeListeners: []\n    };\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {TriggerMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createTriggerItem(configObject, label, itemConfig, folder) {\n    return {\n      menuItem: folder.add(configObject, label),\n      onChangeListeners: []\n    };\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {SliderMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createSliderItem(configObject, label, itemConfig, folder) {\n    // Replace the original itemConfig on the configObject with the actual starting value.\n    configObject[label] = itemConfig.start;\n\n    const listeners = isInt(itemConfig.min) && isInt(itemConfig.max)\n        ? [ConfigController._truncateToInt.bind(null, configObject, label)]\n        : [];\n\n    // Create the menu item.\n    return {\n      menuItem: folder.add(configObject, label, itemConfig.min, itemConfig.max),\n      onChangeListeners: listeners\n    };\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {NumberMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createNumberItem(configObject, label, itemConfig, folder) {\n    // Create the menu item.\n    return {\n      menuItem: folder.add(configObject, label),\n      onChangeListeners: []\n    };\n  }\n\n  /**\n   * This is used to force int sliders to only produce ints.\n   *\n   * This shouldn't be needed, but dat.GUI doesn't seem to be behaving consistently.\n   *\n   * @param configObject\n   * @param label\n   * @private\n   */\n  static _truncateToInt(configObject, label) {\n    configObject[label] = parseInt(configObject[label]);\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {HslColorMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createHslColorItem(configObject, label, itemConfig, folder) {\n    // Create the property that the menu item will use.\n    itemConfig = hslToHsv(itemConfig);\n    configObject[label] = itemConfig;\n\n    // Set up a listener that will keep derived HSL values in sync with the native HSV values used\n    // by the dat.GUI menu item.\n    const calculateHslValues = () => {\n      const hsl = hsvToHsl(configObject[label]);\n      const rgb = hslToRgb(hsl);\n      itemConfig.hsl = hsl;\n      itemConfig.rgb = rgb;\n      itemConfig.rgbVec = vec3.fromValues(rgb.r, rgb.g, rgb.b);\n      itemConfig.hsl.colorString = createHslColorString(hsl);\n    };\n    calculateHslValues();\n\n    // Create the menu item.\n    return {\n      menuItem: folder.addColor(configObject, label),\n      onChangeListeners: [calculateHslValues]\n    };\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {TextMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createTextItem(configObject, label, itemConfig, folder) {\n    return {\n      menuItem: folder.add(configObject, label),\n      onChangeListeners: []\n    };\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {Vec3NumberMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {Array.<MenuItemData>}\n   * @private\n   */\n  static _createVec3NumberItems(configObject, label, itemConfig, folder) {\n    const xLabel = `${label}X`;\n    const yLabel = `${label}Y`;\n    const zLabel = `${label}Z`;\n\n    // Set up a listener that will keep the derived vec3 in sync with its individual coordinates.\n    const _updateVec3 = () => vec3.set(itemConfig, configObject[xLabel], configObject[yLabel],\n        configObject[zLabel]);\n\n    return [\n      [0, xLabel],\n      [1, yLabel],\n      [2, zLabel]\n    ].map(indexAndLabel => {\n      const index = indexAndLabel[0];\n      const label = indexAndLabel[1];\n\n      // Create the individual vec3 coordinate property and initial value.\n      configObject[label] = itemConfig[index];\n\n      // Create the individual vec3 coordinate menu item.\n      return {\n        menuItem: folder.add(configObject, label),\n        onChangeListeners: [_updateVec3],\n        label: label\n      };\n    });\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {Vec3SliderMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {Array.<MenuItemData>}\n   * @private\n   */\n  static _createVec3SliderItems(configObject, label, itemConfig, folder) {\n    // Replace the original itemConfig on the configObject with the actual starting value.\n    configObject[label] = itemConfig.start;\n\n    const xLabel = `${label}X`;\n    const yLabel = `${label}Y`;\n    const zLabel = `${label}Z`;\n\n    // Set up a listener that will keep the derived vec3 in sync with its individual coordinates.\n    const _updateVec3 = () => vec3.set(configObject[label], configObject[xLabel],\n        configObject[yLabel], configObject[zLabel]);\n\n    return [\n      [0, xLabel],\n      [1, yLabel],\n      [2, zLabel]\n    ].map(indexAndLabel => {\n      const index = indexAndLabel[0];\n      const label = indexAndLabel[1];\n      const start = itemConfig.start[index];\n      const min = itemConfig.min[index];\n      const max = itemConfig.max[index];\n\n      // Create the individual vec3 coordinate property and initial value.\n      configObject[label] = start;\n\n      // Create the individual vec3 coordinate menu item.\n      return {\n        menuItem: folder.add(configObject, label, min, max),\n        onChangeListeners: [_updateVec3],\n        label: label\n      };\n    });\n  }\n\n  /**\n   * @param {Object} configObject\n   * @param {string} label\n   * @param {StringSelectorMenuItemConfig} itemConfig\n   * @param {dat.gui.GUI} folder\n   * @returns {MenuItemData}\n   * @private\n   */\n  static _createStringSelectorItem(configObject, label, itemConfig, folder) {\n    // Replace the original itemConfig on the configObject with the actual starting value.\n    configObject[label] = itemConfig.start;\n\n    return {\n      menuItem: folder.add(configObject, label, itemConfig.options),\n      onChangeListeners: []\n    };\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isToggleItem(itemConfig) {\n    return typeof itemConfig === 'boolean';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isTriggerItem(itemConfig) {\n    return typeof itemConfig === 'function';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isSliderItem(itemConfig) {\n    return typeof itemConfig === 'object' &&\n        typeof itemConfig.start === 'number' &&\n        typeof itemConfig.min === 'number' &&\n        typeof itemConfig.max === 'number';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isNumberItem(itemConfig) {\n    return typeof itemConfig === 'number';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isHslColorItem(itemConfig) {\n    return typeof itemConfig === 'object' &&\n        typeof itemConfig.h === 'number' &&\n        typeof itemConfig.s === 'number' &&\n        typeof itemConfig.l === 'number';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isTextItem(itemConfig) {\n    return typeof itemConfig === 'string';\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isStringSelectorItem(itemConfig) {\n    return typeof itemConfig === 'object' &&\n        typeof itemConfig.start === 'string' &&\n        itemConfig.options instanceof Array;\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isVec3NumberItem(itemConfig) {\n    return (itemConfig instanceof Float32Array || itemConfig instanceof Array) &&\n        itemConfig.length === 3;\n  }\n\n  /**\n   * @param {MenuItemConfig} itemConfig\n   * @returns {boolean}\n   */\n  static isVec3SliderItem(itemConfig) {\n    return typeof itemConfig === 'object' &&\n        ConfigController.isVec3NumberItem(itemConfig.start) &&\n        ConfigController.isVec3NumberItem(itemConfig.min) &&\n        ConfigController.isVec3NumberItem(itemConfig.max);\n  }\n}\n\nconst configController = new ConfigController();\n\nexport {configController};\n\n/**\n * @typedef {Object} MenuItemData\n * @property {dat.gui.controller} menuItem The actual dat.GUI menu item.\n * @property {Array.<Function>} onChangeListeners onChange listeners for the menu item.\n * @property {string} [label] The label used for the menu item.\n */\n\n/**\n * @typedef {Object} MenuFolderConfig\n * @property {string} label\n * @property {Object} config A map from labels to MenuItemConfigs. Any config item whose label\n * starts with '_' will be treated as internal and will not be exposed to the user.\n * @property {boolean} [isOpen=false]\n * @property {Object} [onChangeListeners] A map from labels to on-change event handlers.\n * @property {Array.<MenuFolderConfig>} [childFolders]\n * @property {Object} [items] A map from labels to MenuItemDatas.\n * @property {dat.gui.GUI} [folder] Created and added by the ConfigController after registering the\n * folder.\n */\n\n/**\n * @typedef {ToggleMenuItemConfig|TriggerMenuItemConfig|SliderMenuItemConfig|NumberMenuItemConfig|HslColorMenuItemConfig|TextMenuItemConfig|StringSelectorMenuItemConfig|Vec3NumberMenuItemConfig|Vec3SliderMenuItemConfig} MenuItemConfig\n */\n\n/**\n * @typedef {boolean} ToggleMenuItemConfig\n */\n\n/**\n * @typedef {Function} TriggerMenuItemConfig\n */\n\n/**\n * @typedef {Object} SliderMenuItemConfig\n * @property {number} start\n * @property {number} min\n * @property {number} max\n */\n\n/**\n * @typedef {number} NumberMenuItemConfig\n */\n\n/**\n * @typedef {Object} HslColorMenuItemConfig\n * @property {number} h A value from 0 to 1.\n * @property {number} s A value from 0 to 1.\n * @property {number} l A value from 0 to 1.\n */\n\n/**\n * @typedef {string} TextMenuItemConfig\n */\n\n/**\n * @typedef {Object} StringSelectorMenuItemConfig\n * @property {string} start\n * @property {Array.<String>} options\n */\n\n/**\n * @typedef {vec3} Vec3NumberMenuItemConfig\n */\n\n/**\n * @typedef {Object} Vec3SliderMenuItemConfig\n * @property {vec3} start\n * @property {vec3} min\n * @property {vec3} max\n */\n","import { animator } from 'lsl-animatex';\nimport {\n  GrafxController,\n  handlePageFocusChange,\n}\nfrom 'grafx';\nimport { configController } from './config-controller';\nimport { InputController } from './input-controller';\n\n/**\n * This top-level Controller class initializes and runs the rest of the app.\n */\nclass GameController extends GrafxController {\n  constructor() {\n    super();\n\n    this.isGameOver = true;\n    this._inputCtrl = null;\n  }\n\n  /**\n   * Initializes the app. After this completes successfully, call run to actually start the app.\n   *\n   * @param {HTMLCanvasElement} canvas\n   * @param {Array.<ProgramWrapperConfig>} programConfigs Configurations for program wrappers that\n   * should be pre-cached before starting the rest of the app.\n   * @param {Array.<String>} texturePaths Texture images that should be pre-cached before\n   * starting the rest of the app.\n   * @param {Function.<Scene>} SceneImpl A class that extends GameScene.\n   * @returns {Promise}\n   */\n  initialize(canvas, programConfigs, texturePaths, SceneImpl) {\n    this._canvas = canvas;\n\n    configController.initialize();\n    this._setUpInput();\n\n    return super.initialize(canvas, programConfigs, texturePaths, SceneImpl);\n  }\n\n  destroy() {\n    this._inputCtrl.destroy();\n  }\n\n  /**\n   * Runs the app. This should be called after initialize.\n   *\n   * A few things happen if this is run in dev mode:\n   * - The draw and update steps of each frame are wrapped in a try/catch block.\n   * - This method returns a Promise that rejects if an error is throw during any update or draw\n   *   step and resolves when this controller has finished (currently never)\n   */\n  run() {\n    handlePageFocusChange(hasFocus => this._onPageFocusChange(hasFocus));\n    super.run();\n  }\n\n  pause() {\n    animator.pause();\n  }\n\n  unpause() {\n    animator.unpause();\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  get isPaused() {\n    return animator.isPaused;\n  }\n\n  /**\n   * @param {boolean} hasFocus\n   * @private\n   */\n  _onPageFocusChange(hasFocus) {\n    if (!hasFocus) {\n      this.pause();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setUpInput() {\n    this._inputCtrl = new InputController();\n    this._inputCtrl.preventDefaultBrowserBehaviorForKey('SPACE');\n  }\n\n  /**\n   * Initializes the scene.\n   *\n   * @param {Function.<Scene>} SceneImpl A class that extends GameScene.\n   * @returns {Promise}\n   * @protected\n   */\n  _setUpScene(SceneImpl) {\n    this._scene = new SceneImpl({\n      gl: this._gl,\n      getViewMatrix: () => this._getViewMatrix(),\n      getProjectionMatrix: () => this._getProjectionMatrix(),\n    }, this, this._inputCtrl);\n    return this._scene.getIsReady().then(() => {\n      this._scene.reset();\n      this._updateAspectRatio(); // TODO: This should NOT happen here or using the glUtil globals.\n    });\n  }\n}\n\nexport { GameController };\n","import { Scene } from 'grafx';\nimport { Aabb } from 'lsl-physx';\n\n/**\n * This class handles the overall scene.\n *\n * @abstract\n */\nclass GameScene extends Scene {\n  /**\n   * @param {ModelGroupControllerConfig} modelControllerParams\n   * @param {GameController} gameCtrl\n   * @param {InputController} inputCtrl\n   * @param {number} renderDistance\n   */\n  constructor(modelControllerParams, gameCtrl, inputCtrl, renderDistance) {\n    super(modelControllerParams);\n\n    // GameScene is an abstract class. It should not be instantiated directly.\n    if (new.target === GameScene) {\n      throw new TypeError('Cannot construct GameScene instances directly');\n    }\n\n    this._gameCtrl = gameCtrl;\n    this._inputCtrl = inputCtrl;\n    this._renderDistance = renderDistance;\n    this._bounds = Aabb.createAsUniformAroundCenter(\n      vec3.fromValues(0, 0, 0), this._renderDistance);\n  }\n\n  reset() {\n    this.centerOfVolume = vec3.fromValues(0, 0, 0);\n    super.reset();\n  }\n\n  /** @returns {Aabb} */\n  get bounds() {\n    return this._bounds;\n  }\n  /** @returns {vec3} */\n  get centerOfVolume() {\n    return this._bounds.centerOfVolume;\n  }\n  /** @param {vec3} value */\n  set centerOfVolume(value) {\n    this._bounds.setAsUniformAroundCenter(value, this._renderDistance);\n  }\n}\n\nexport { GameScene };\n","import {keyCodes} from 'grafx';\n\n// TODO: Figure out how to capture: tab, space, escape, enter; prevent their default behaviors when\n// listeners have been registered for them.\n\n/**\n * This class handles user input.\n */\nclass InputController {\n  constructor() {\n    this._keyDownListeners = {};\n    this._keyUpListeners = {};\n    this._currentlyPressedKeys = {};\n    this._keysToPreventDefaultBrowserBehaviorFor = {};\n\n    this._mainKeyDownListener = event => this._handleKeyDown(event);\n    this._mainKeyUpListener = event => this._handleKeyUp(event);\n    this._mainKeyPressListener = event => this._handleKeyPress(event);\n\n    window.addEventListener('keydown', this._mainKeyDownListener, false);\n    window.addEventListener('keyup', this._mainKeyUpListener, false);\n    window.addEventListener('keypress', this._mainKeyPressListener, false);\n  }\n\n  destroy() {\n    window.removeEventListener('keydown', this._mainKeyDownListener);\n    window.removeEventListener('keyup', this._mainKeyUpListener);\n    window.removeEventListener('keypress', this._mainKeyPressListener);\n  }\n\n  /**\n   * Registers a callback to be called whenever the given key is pressed.\n   *\n   * @param {string} key\n   * @param {Function} callback\n   */\n  addKeyDownListener(key, callback) {\n    let listenersForKey = this._keyDownListeners[keyCodes[key]];\n\n    // Make sure the listener list is initialized for this key.\n    if (!listenersForKey) {\n      listenersForKey = new Set();\n      this._keyDownListeners[keyCodes[key]] = listenersForKey;\n    }\n\n    listenersForKey.add(callback);\n  }\n\n  /**\n   * Registers a callback to be called whenever the given key is lifted.\n   *\n   * @param {string} key\n   * @param {Function} callback\n   */\n  addKeyUpListener(key, callback) {\n    let listenersForKey = this._keyUpListeners[keyCodes[key]];\n\n    // Make sure the listener list is initialized for this key.\n    if (!listenersForKey) {\n      listenersForKey = new Set();\n      this._keyUpListeners[keyCodes[key]] = listenersForKey;\n    }\n\n    listenersForKey.add(callback);\n  }\n\n  /**\n   * Un-registers a callback to be called whenever the given key is pressed.\n   *\n   * @param {string} key\n   * @param {Function} callback\n   */\n  removeKeyDownListener(key, callback) {\n    this._keyDownListeners[keyCodes[key]].delete(callback);\n  }\n\n  /**\n   * Un-registers a callback to be called whenever the given key is lifted.\n   *\n   * @param {string} key\n   * @param {Function} callback\n   */\n  removeKeyUpListener(key, callback) {\n    this._keyUpListeners[keyCodes[key]].delete(callback);\n  }\n\n  /**\n   * Registers the given key to prevent the default browser behavior when it is pressed.\n   *\n   * @param {string} key\n   */\n  preventDefaultBrowserBehaviorForKey(key) {\n    this._keysToPreventDefaultBrowserBehaviorFor[keyCodes[key]] = true;\n  }\n\n  /**\n   * Un-registers the given key to prevent the default browser behavior when it is pressed.\n   *\n   * @param {string} key\n   */\n  allowDefaultBrowserBehaviorForKey(key) {\n    delete this._keysToPreventDefaultBrowserBehaviorFor[keyCodes[key]];\n  }\n\n  /**\n   * Determines whether the given key is currently pressed down.\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  isKeyCurrentlyPressed(key) {\n    return !!this._currentlyPressedKeys[keyCodes[key]];\n  }\n\n  /**\n   * Saves the given key as being pressed.\n   *\n   * @param {KeyboardEvent} event\n   * @private\n   */\n  _handleKeyDown(event) {\n    // If this key was already being pressed down, then do nothing (when a key is held down, many\n    // keydown events are actually triggered).\n    if (this._currentlyPressedKeys[event.keyCode]) {\n      return;\n    }\n\n    // Mark this key as being pressed down.\n    this._currentlyPressedKeys[event.keyCode] = true;\n\n    // Call any registered key-down listeners for this key.\n    const listeners = this._keyDownListeners[event.keyCode];\n    if (listeners) {\n      listeners.forEach(listener => listener());\n    }\n  }\n\n  /**\n   * Calls all key-up listeners that have been registered for the given key.\n   *\n   * @param {KeyboardEvent} event\n   * @private\n   */\n  _handleKeyUp(event) {\n    // Mark this key as no longer being pressed down.\n    delete this._currentlyPressedKeys[event.keyCode];\n\n    // Call any registered key-up listeners for this key.\n    const listeners = this._keyUpListeners[event.keyCode];\n    if (listeners) {\n      listeners.forEach(listener => listener());\n    }\n  }\n\n  /**\n   * Prevents the default browser behavior for keys that have been registered to prevent.\n   *\n   * @param {KeyboardEvent} event\n   * @private\n   */\n  _handleKeyPress(event) {\n    if (this._keysToPreventDefaultBrowserBehaviorFor[event.keyCode]) {\n      event.preventDefault();\n    }\n  }\n}\n\nexport {InputController};\n","import {isInDevMode, ModelController, StandardModelController, vec3ToString} from 'grafx';\nimport {PhysicsJob, PhysicsState} from 'lsl-physx';\n\n/**\n * This class represents a non-collidable physics-based model-controller.\n *\n * It uses composition to control an instance of a ModelController along with a corresponding\n * instance of a PhysicsJob.\n *\n * @implements {ModelControllerInterface}\n * @abstract\n */\nclass PhysicsModelController {\n  /**\n   * @param {ModelController|ModelControllerConfig} modelControllerOrParams\n   * @param {PhysicsJob|DynamicsConfig} physicsJobOrDynamicsParams\n   * @param {RenderableShapeConfig} [shapeParams]\n   * @param {Array.<ForceApplier>} [forceAppliers]\n   */\n  constructor(modelControllerOrParams, physicsJobOrDynamicsParams, shapeParams, forceAppliers) {\n    // PhysicsModelController is an abstract class. It should not be instantiated directly.\n    if (new.target === PhysicsModelController) {\n      throw new TypeError('Cannot construct PhysicsModelController instances directly');\n    }\n\n    this.modelCtrl = modelControllerOrParams instanceof ModelController\n        ? modelControllerOrParams\n        : new StandardModelController(modelControllerOrParams, shapeParams);\n\n    if (physicsJobOrDynamicsParams instanceof PhysicsJob) {\n      this.physicsJob = physicsJobOrDynamicsParams;\n    } else {\n      const state = new PhysicsState(physicsJobOrDynamicsParams);\n      this.physicsJob = new PhysicsJob(forceAppliers, state);\n    }\n\n    this._originalPosition = vec3.clone(this.physicsJob.currentState.position);\n\n    this._patchModelController({\n      /**\n       * Patches the ModelController's updateTransforms method in order to keep it's local-transform\n       * matrix in-sync with the PhysicsJob's position and orientation.\n       */\n      updateTransforms: (superVersion) => {\n        // Update the ModelController's local-transform matrix according to the PhysicsJob's\n        // current position and orientation.\n        mat4.fromRotationTranslationScale(this.modelCtrl._localTransform,\n            this.renderOrientation, this.renderPosition,\n            this.modelCtrl.scale);\n        superVersion();\n      },\n    });\n\n    if (isInDevMode) {\n      const controllerName = this.constructor.name.replace('Controller', '');\n      console.debug(`${controllerName} created @ ${vec3ToString(this.position)}`);\n    }\n  }\n\n  /**\n   * Patches the given methods on the underlying ModelController.\n   *\n   * The patched methods are passed the original or \"super\" version of the method as the first\n   * argument; the normal method arguments are provided after.\n   *\n   * @protected\n   */\n  _patchModelController(patches) {\n    Object.keys(patches).forEach((methodName) => {\n      const newMethod = patches[methodName];\n      const superVersion = this.modelCtrl[methodName].bind(this.modelCtrl);\n      this.modelCtrl[methodName] = newMethod.bind(this.modelCtrl, superVersion);\n    });\n  }\n\n  /**\n   * Registers this controller's PhysicsJob(s) with the physics engine.\n   */\n  reset() {\n    this.modelCtrl.reset();\n    this.physicsJob.position = this._originalPosition;\n    this.physicsJob.finish();\n    this.physicsJob.start();\n  }\n\n  /**\n   * Unregisters this controller's PhysicsJob(s) with the physics engine.\n   */\n  destroy() {\n    this.modelCtrl.destroy();\n    this.physicsJob.finish();\n    if (isInDevMode) {\n      const controllerName = this.constructor.name.replace('Controller', '');\n      console.debug(`${controllerName} destroyed @ ${vec3ToString(this.position)}`);\n    }\n  }\n\n  /** @param {vec3} value */\n  set position(value) {\n    this.physicsJob.position = value;\n  }\n  /** @returns {vec3} */\n  get position() {\n    return this.physicsJob.currentState.position;\n  }\n  /** @returns {quat} */\n  get orientation() {\n    return this.physicsJob.currentState.orientation;\n  }\n  // FIXME: Can I remove this?\n  /** @returns {vec3} */\n  get velocity() {\n    return this.physicsJob.currentState.velocity;\n  }\n\n  /** @returns {vec3} */\n  get renderPosition() {\n    return this.physicsJob.renderState.position;\n  }\n  /** @returns {quat} */\n  get renderOrientation() {\n    return this.physicsJob.renderState.orientation;\n  }\n  // FIXME: Can I remove this?\n  /** @returns {vec3} */\n  get renderVelocity() {\n    return this.physicsJob.renderState.velocity;\n  }\n\n  /**\n   * @returns {DefaultModel}\n   * @protected\n   */\n  get _model() {\n    return this.modelCtrl._model;\n  }\n  /**\n   * @returns {vec3}\n   */\n  get scale() {\n    return this.modelCtrl.scale;\n  }\n  /**\n   * Returns a promise that resolves when this model controller is ready for the app to run.\n   *\n   * @returns {Promise}\n   */\n  getIsReady() {\n    return this.modelCtrl.getIsReady();\n  }\n  /**\n   * Gets the model transform matrix, in local coordinates.\n   *\n   * @returns {mat4}\n   */\n  get localTransform() {\n    return this.modelCtrl.localTransform;\n  }\n  /**\n   * Gets the model transform matrix, in world coordinates.\n   *\n   * @returns {mat4}\n   */\n  get worldTransform() {\n    return this.modelCtrl.worldTransform;\n  }\n  /**\n   * Calls update, updateTransforms, and updateChildren.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  updateSelfAndChildren(currentTime, deltaTime) {\n    this.modelCtrl.updateSelfAndChildren(currentTime, deltaTime);\n  }\n}\n\nexport {PhysicsModelController};\n","import {FollowCamera} from 'grafx';\n\n// TODO: Ideally, this would use the built-in physics engine; however, we I tried integrating it\n// before, I noticed some instability when moving at high speeds. This probably had something to do\n// with accessing different versions of the target position (previousState vs currentState vs\n// renderState)for force/position calculations\n\n/**\n * This class defines a spring-based follow camera.\n *\n * This camera is positioned at a relative, flexible distance and rotation from the observed target\n * and follows the target's position and orientation with a spring force tying the camera to the\n * desired position.\n *\n * A follow camera rotates in all three dimensions; it does not have a fixed roll.\n */\nclass SpringFollowCamera extends FollowCamera {\n  /**\n   * If oldCamera is given, then the state of the new camera will be initialized to match that of\n   * the old camera. This enables a smooth transition when changing cameras.\n   *\n   * @param {CameraTarget} cameraTarget\n   * @param {FollowCameraConfig} followCameraParams\n   * @param {CameraConfig} cameraParams\n   * @param {Camera} [oldCamera]\n   */\n  constructor(cameraTarget, followCameraParams, cameraParams, oldCamera) {\n    super(cameraTarget, followCameraParams, cameraParams, oldCamera);\n    // These could have been set in _matchOldCamera.\n    this._velocity = this._velocity || vec3.create();\n    this._acceleration = this._acceleration || vec3.create();\n  }\n\n  reset() {\n    super.reset();\n    vec3.copy(this._position, this._followCameraParams._intendedTranslationFromTarget);\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._updateAccelerationVelocityAndPosition(deltaTime);\n    this._updateOrientation();\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateAccelerationVelocityAndPosition(deltaTime) {\n    this._updateAcceleration();\n    this._updatePosition(deltaTime);\n    this._updateVelocity(deltaTime);\n  }\n\n  /**\n   * Update the camera's acceleration using Hooke's law and drag.\n   *\n   * @private\n   */\n  _updateAcceleration() {\n    this._applySpringAcceleration();\n    this._applySpringDamping();\n  }\n\n  /**\n   * Update the camera's acceleration using Hooke's law.\n   *\n   * acceleration = displacement * coefficient\n   *\n   * @private\n   */\n  _applySpringAcceleration() {\n    const displacement = vec3.create();\n    vec3.subtract(displacement, this._getIntendedPosition(), this._position);\n    vec3.scale(this._acceleration, displacement, this._followCameraParams.springCoefficient);\n  }\n\n  /**\n   * @private\n   */\n  _applySpringDamping() {\n    const damping = vec3.create();\n    vec3.scale(damping, this._velocity, -this._followCameraParams.dampingCoefficient);\n    vec3.add(this._acceleration, this._acceleration, damping);\n  }\n\n  /**\n   * Update the camera's velocity according to its current acceleration.\n   *\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateVelocity(deltaTime) {\n    vec3.scaleAndAdd(this._velocity, this._velocity, this._acceleration, deltaTime);\n  }\n\n  /**\n   * Update the camera's position according to its current velocity.\n   *\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updatePosition(deltaTime) {\n    vec3.scaleAndAdd(this._position, this._position, this._velocity, deltaTime);\n  }\n\n  /**\n   * @param {Camera} oldCamera\n   * @protected\n   */\n  _matchOldCamera(oldCamera) {\n    super._matchOldCamera(oldCamera);\n    if (oldCamera instanceof SpringFollowCamera) {\n      this._velocity = this._velocity || vec3.create();\n      this._acceleration = this._acceleration || vec3.create();\n      vec3.copy(this._velocity, oldCamera._velocity);\n      vec3.copy(this._acceleration, oldCamera._acceleration);\n    }\n  }\n}\n\nexport {SpringFollowCamera};\n","export * from './src/wall-collidable';\nexport * from './src/wall-controller';\n","import { Aabb } from 'lsl-physx';\n\n/**\n * This class represents a wall or floor.\n *\n * This is just a convenience class that extends Aabb.\n */\nclass Wall extends Aabb {\n  /**\n   * - If the x parameter is given, then a wall will be constructed along the y-z plane with its\n   * surface at the x coordinate. The y and z parameters are handled similarly.\n   * - Only one of the x/y/z parameters should be specified.\n   * - If isOpenOnPositiveSide is true, then the wall will be open toward the positive direction.\n   *\n   * @param {WallParams} wallParams\n   */\n  constructor(wallParams) {\n    let minX;\n    let minY;\n    let minZ;\n    let maxX;\n    let maxY;\n    let maxZ;\n\n    let { x, y, z, isOpenOnPositiveSide, thickness, halfSideLength } = wallParams;\n    thickness = thickness || 80000;\n    halfSideLength = halfSideLength || 80000;\n\n    if (typeof x === 'number') {\n      if (isOpenOnPositiveSide) {\n        minX = x - thickness;\n        maxX = x;\n      }\n      else {\n        minX = x;\n        maxX = x + thickness;\n      }\n      minY = -halfSideLength;\n      minZ = -halfSideLength;\n      maxY = halfSideLength;\n      maxZ = halfSideLength;\n    }\n    else if (typeof y === 'number') {\n      if (isOpenOnPositiveSide) {\n        minY = y - thickness;\n        maxY = y;\n      }\n      else {\n        minY = y;\n        maxY = y + thickness;\n      }\n      minX = -halfSideLength;\n      minZ = -halfSideLength;\n      maxX = halfSideLength;\n      maxZ = halfSideLength;\n    }\n    else {\n      if (isOpenOnPositiveSide) {\n        minZ = z - thickness;\n        maxZ = z;\n      }\n      else {\n        minZ = z;\n        maxZ = z + thickness;\n      }\n      minX = -halfSideLength;\n      minY = -halfSideLength;\n      maxX = halfSideLength;\n      maxY = halfSideLength;\n    }\n\n    super(minX, minY, minZ, maxX, maxY, maxZ, true);\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get scale() {\n    // Reuse the same object when this is called multiple times.\n    this._scale = this._scale || vec3.create();\n    vec3.set(this._scale, this.rangeX, this.rangeY, this.rangeZ);\n    return this._scale;\n  }\n}\n\nexport { Wall };\n","import {StandardModelController} from 'grafx';\nimport {collidableStore} from 'lsl-physx';\n\nimport {Wall} from './wall-collidable';\n\n/**\n * This class defines a wall-controller.\n */\nclass WallController extends StandardModelController {\n  /**\n   * @param {ModelControllerConfig} modelControllerParams\n   * @param {WallParams} wallParams\n   */\n  constructor(modelControllerParams, wallParams) {\n    const shapeParams = {\n      shapeId: 'CUBE',\n      isUsingSphericalNormals: wallParams.useSmoothShading,\n      textureSpan: wallParams.textureSpan\n    };\n\n    super(modelControllerParams, shapeParams);\n\n    this._collidable = new Wall(wallParams);\n    collidableStore.registerCollidable(this._collidable);\n  }\n\n  reset() {\n    // Re-size and re-position the wall.\n    mat4.fromTranslation(this._localTransform, this._collidable.centerOfVolume);\n    mat4.scale(this._localTransform, this._localTransform, this._collidable.scale);\n\n    super.reset();\n  }\n\n  /**\n   * Called when this is done being used, and is being destroyed from memory.\n   */\n  destroy() {\n    super.destroy();\n    collidableStore.unregisterCollidable(this._collidable);\n  }\n\n  /**\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @protected\n   */\n  update(currentTime, deltaTime) {}\n}\n\nexport {WallController};\n\n/**\n * @typedef {Object} WallParams\n * @property {number} x\n * @property {number} y\n * @property {number} z\n * @property {boolean} isOpenOnPositiveSide\n * @property {number} thickness\n * @property {number} halfSideLength\n * @property {boolean} useSmoothShading\n * @property {TextureSpan} textureSpan\n */\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}